/*
 * Cloud.cc
 *
 *  Created on: Aug 7, 2011
 *      Author: anuchart
 */

#include "UCACPacket_m.h"

#define STACKSIZE 16384

/**
 * Simulates a Cloud between clients and server; see NED file for more info
 */
class Cloud : public cSimpleModule
{
  public:
    Cloud() : cSimpleModule(STACKSIZE) {}
    virtual void activity();
};

Define_Module(Cloud);

void Cloud::activity()
{
    simtime_t pkDelay = 1 / (double)par("pkRate");
    int queueMaxLen = (int) par("queueMaxLen");
    cQueue queue("queue");
    for(;;)
    {
        // pop from queue if queue is not empty, otherwise receive new msg
        cMessage *msg;
        if (!queue.empty())
            msg = (cMessage *) queue.pop();
        else
            msg = receive();

        // model processing delay and packets that arrive meanwhile are queued
        waitAndEnqueue(pkDelay, &queue);

        // send msg to an index port according to destination
        UCACPacket *pk = check_and_cast<UCACPacket *>(msg);
        int dest = pk->getDestAddress();
        EV << "cloud: Relaying msg to addr = " << dest << "\n";
        send(msg, "port$o", dest);

        // display status: normal=queue empty, yellow=queued packets; red=queue overflow
        int qLen = queue.length();
        if (ev.isGUI()) getDisplayString().setTagArg("i",1, qLen==0 ? "" : qLen<queueMaxLen ? "gold" : "red");

        // model finite queue size
        while (queue.length() > queueMaxLen)
        {
            EV << "Buffer overflow, discarding " << queue.front()->getName() << endl;
            delete queue.pop();
        }
    }
}
