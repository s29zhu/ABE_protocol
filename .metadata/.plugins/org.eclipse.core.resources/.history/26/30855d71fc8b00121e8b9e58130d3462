/*
 * ConsumerProcess.cc
 *
 *  Created on: Mar 8, 2013
 *      Author: s29zhu
 */
#include "UCACPacket_m.h"

class ConsumerProcess : public cSimpleModule
{
  private:
    Token *sk_token;
    pairing_t pairing;
    element_t g, h, f, owner_pub, nounce;
    int consumerAddr ;
    int masterAddr;
    int attributeAddr;
    int resourceAddr;
    cGate *parentOutGate;
  public:
    ConsumerProcess() : cSimpleModule(0) {}
    virtual void handleMessage(cMessage *m);
    virtual void initialize();
};

Define_Module( ConsumerProcess );

void ConsumerProcess::initialize(){
/*    UCACPacket *starter = new UCACPacket("consumer starts message", 100);
    simtime_t current_time = simTime();
    scheduleAt(current_time + 0.01, starter);*/
    // retrieve parent's parameters
    cModule *parentMod = getParentModule();
    // retrieve parent's out gate
    parentOutGate = parentMod->gate("port$o");

    // assign server address: index of Switch's gate to which servers are connected
    //parentOutGate->getNextGate() gives us the cloud gate vector
    int maxIndex = parentOutGate->getNextGate()->size()-1;
    consumerAddr = maxIndex-3; WATCH(consumerAddr);
    masterAddr = maxIndex-2; WATCH(masterAddr);
    attributeAddr = maxIndex-1; WATCH(attributeAddr);
    resourceAddr = maxIndex; WATCH(resourceAddr);

    //declaration for file transfer
    sk_token = new Token;

    FILE *fp;
    char s[16384];
    fp = fopen("public/a.param", "r");
    if (!fp) {
        pbc_die("error opening parameter file");
    }
    size_t count = fread(s, 1, 16384, fp);

    if(!count){
        pbc_die("read parameter failure\n");
    }
    fclose(fp);
    pairing_init_set_buf(pairing, s, count);

    if(pairing_init_set_buf(pairing, s, count)){
        pbc_die("pairing init failed\n");
    }

    if(!pairing_is_symmetric(pairing)) pbc_die("pairing is not symmetric\n");

    element_init_G1(g, pairing);
    element_init_G1(h, pairing);
    element_init_G1(f, pairing);
    element_init_GT(owner_pub, pairing);
    element_init_Zr(nounce, pairing);
//    element_set(g, (*(curve_data_ptr) (*(*(a_pairing_data_ptr) (*pairing).data).Eq).data).gen);
    char str_g[512] = "[2080247391869362085132539778201998483380874841515454429046327131439543677740031077799512395854029182308535916504326748475626106457866048357583741668275635, 3462536684798900385254814488714127044393463459789164641468572493723203953888500069097792605858951898418781245583533869595156169194014075269175495278137832]";
    element_set_str(g, str_g, 10);
    //read out the public key h of authorizer
    char *str_read, *str1;
    str_read = (char *)malloc(sizeof(char)*500);
    str1 = (char *)malloc(sizeof(char)*500);
    fp = fopen("public/authorizer_public_keys.txt", "r");
    if(!fp)
        pbc_die("open authorizer public key file failed");
    else{
        while(true){
            fgets(str_read, 500, fp);
            strncpy(str1, str_read, 2);
            if(strstr(str_read, "h:")){
                fgets(str1, 500, fp);
                strcat(str_read, str1);
              // printf("%s\n", str_read);
                break;
            }
        }
        element_set_str(h, str_read + 2, 10);
        //free and allocte memory again to avoid the effect of previous data
        free(str_read);
        free(str1);
        str_read = (char *)malloc(sizeof(char)*500);
        str1 = (char *)malloc(sizeof(char)*500);
        while(true){
            fgets(str_read, 500, fp);
            strncpy(str1, str_read, 2);
            if(strstr(str_read, "f:")){
                fgets(str1, 500, fp);
                strcat(str_read, str1);
              // printf("%s\n", str_read);
                break;
            }
        }
        element_set_str(f, str_read + 2, 10);
        fclose(fp);
    }
    //read out owner public key
    fp = fopen("public/owner_public_key.txt", "r");
    if(!fp)
        pbc_die("open authorizer public key file failed");
    else{
        while(true){
            fgets(str_read, 500, fp);
            strncpy(str1, str_read, 11);
            if(strstr(str_read, "public key:")){
                fgets(str1, 500, fp);
                strcat(str_read, str1);
              // printf("%s\n", str_read);
                break;
            }
        }
        element_set_str(owner_pub, str_read + 11, 10);
        fclose(fp);
    }
}
void ConsumerProcess::handleMessage(cMessage *msg)
{
    UCACPacket *m = check_and_cast<UCACPacket *>(msg);
    // receive the CONN_REQ we were created to handle
    for(;;){
        if(m->isSelfMessage()){
            EV<<"consumer process caught selfmessage\n";
            delete m;
            break;
        }

        if (m->getKind()==CONN_REQ) {
            //retrieve client addresses and process ID
            //clientProcId = pk->getSrcProcId();
            // set the module name to something informative
            EV<<"consumer process got conn_req packet from owner\n";
            EV<<"consumerProc"<<getId()<<"clientAddr"<<m->getSrcAddress();
            char buf[30];
            sprintf(buf, "consumerProc%d-clientAddr%d", getId(), m->getSrcAddress());
            setName(buf);
            UCACPacket *res = new UCACPacket("connect ack", CONN_ACK);
            // respond with CONN_ACK
            res->setSrcAddress(consumerAddr);
            EV<<"\ninside consumer process source address"<<consumerAddr<<endl;
            res->setDestAddress(m->getSrcAddress());
            res->setSrcProcId(getId());
            //send the packet through parent out gate
            sendDirect(res, parentOutGate);
            EV << "consumerProc: sent CONN_ACK to client addr = " << m->getSrcAddress() << endl;
            delete m;
            break;
        }
        if(m->getKind() == PRNT_REQ){
            UCACRedirectPacket *redirect_packet = new UCACRedirectPacket("consumer direct owner to authorizer", REDIRECT);
            redirect_packet->setSrcAddress(consumerAddr);
            redirect_packet->setDestAddress(m->getSrcAddress());
            redirect_packet->setSrcProcId(getId());
            redirect_packet->setID("ggprint@uwaterloo.ca");
            redirect_packet->setRedirect_URI("www.flickr.com");
            //do not use the accurate access policy here, we will see how is going to affect the next
            redirect_packet->setAccess_policy("access policy");
            sendDirect(redirect_packet, parentOutGate);
            EV << "consumerProc: sent REDIRECT to client addr = " << m->getSrcAddress() << endl;
            break;
        }
        if(m->getKind() == TOKEN){
            UCACTokenPacket *token_packet = check_and_cast<UCACTokenPacket *>(msg);
            //get everything out from the packet and save the info in sk_token
            sk_token->D[0] = token_packet->getSk_token().D[0];
            int i = 0;
            for(i = 0; i < NUM_SHARE; i++){
                sk_token->Di[i][0] = token_packet->getSk_token().Di[i][0];
                sk_token->Di_prime[i][0] = token_packet->getSk_token().Di_prime[i][0];
            }
            nounce[0] = token_packet->getNounce();
            delete token_packet;
            UCACPacket *conn = new UCACPacket("consumer connet to the authority", CONN_REQ);
            conn->setSrcAddress(consumerAddr);
            conn->setDestAddress(attributeAddr);
            conn->setSrcProcId(getId());
            sendDirect(conn, parentOutGate);
            break;
        }
        if(m->getKind() == CONN_ACK && m->getSrcAddress() == attributeAddr){

            UCACTokenPacket *req_des2 = new UCACTokenPacket("consumer request descriptive part2 from authority", DES2_REQ);
            Token des2;
            int i = 0;
            element_init_G1(des2.D, pairing);
              for(i = 0; i < NUM_SHARE; i++){
                element_init_G1(des2.Di[i], pairing);
                element_init_G1(des2.Di_prime[i], pairing);
            }
            req_des2->setNounce(nounce[0]);
            element_printf("consumer nounce%B\n", nounce);
            req_des2->setSrcAddress(consumerAddr);
            req_des2->setDestAddress(attributeAddr);
            req_des2->setDestProcId(m->getSrcProcId());
            req_des2->setSrcProcId(getId());
            req_des2->setSk_token(des2);
            sendDirect(req_des2, parentOutGate);
            delete m;
            break;
        }
        if(m->getKind() == DES2_RES){
            UCACTokenPacket *des2 = check_and_cast<UCACTokenPacket *>(msg);
            sk_token->Di_prime[6][0] = des2->getSk_token().Di_prime[6][0];
            delete des2;
            //now consumer has complete secret token
            UCACPacket *conn = new UCACPacket("connect request", CONN_REQ);
            conn->setSrcAddress(consumerAddr);
            conn->setDestAddress(resourceAddr);
            conn->setSrcProcId(getId());
            sendDirect(conn, parentOutGate);
            break;
        }
        if(m->getKind() == CONN_ACK && m->getSrcAddress() == resourceAddr){
            delete m;
            //ask for the file
            break;
        }
    }
}
