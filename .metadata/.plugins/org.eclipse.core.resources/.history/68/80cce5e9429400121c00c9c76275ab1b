/*
 * Owner.cc
 *
 *  Feb 28 2013
 *  Author: Shasha Zhu
 *
 */
#include "poly.h"

void get_poly_value(element_t y, element_t *poly, element_t x, element_t x_temp, int poly_length){
    int i = 0;
    mpz_t i_mpz;
    mpz_init(i_mpz);
    element_set0(y);
    element_printf("element x = %B\n", x);
    if(element_is0(x)){
        element_set(y, poly[0]);
    }else if(element_is1(x)){//something wrong with x = 1 case, debugging here, should delete this later
        for(i = 0; i < poly_length; i++){
            element_add(y, y, poly[i]);
           // element_printf("temp y = %B  poly[i]= %B\n", y, poly[i]);
        }
    }else{
        for(i = 0; i < poly_length; i++){
            element_set(x_temp, x);
            mpz_set_si(i_mpz, i);
            element_pow_mpz(x_temp, x_temp, i_mpz);
            element_mul(x_temp, x_temp, poly[i]);
            element_add(y, y, x_temp);
        }
    }
    element_printf("value of the poly = %B\n", y);
}

//get (x+x0)(x+x1)...(x+x6)
//array stores polynomial coefficients, [0] stors constant, [1] stores degree 1 and so on
void get_px(element_t *px,//output of the function, final polynamial p(x)
        element_t *poly,//denominator polynomials
        element_t *pre_poly,
        element_t *xi_array,//solution of the final polynomial p(x)
        element_t *invert_xi_array,
        element_t *yi_array,
        element_t *invert_yi_array,
        int length_of_xi_array,
        element_t divisor,//nominator for each denominator polynomial
        element_t temp_div){

    int i = 0, j = 0, k = 0, m = 0;
    for(i = 0; i < length_of_xi_array; i++){
        element_neg(invert_xi_array[i], xi_array[i]);
    }
    //we use invert_xi_array instead of xi_array which will leave us only deal with the value not their signs
    for(k = 0; k < length_of_xi_array; k++){
        //initialize poly array
        element_set1(poly[0]);
        for(j = 1; j < length_of_xi_array; j++){
            element_set0(poly[j]);
        }
        element_set1(divisor);
        for(i = 0; i < length_of_xi_array; i++){
            if(i != k){
                /*computer the denominator*/
                //save the re-multiplication polynomial
                for(j = 0; j < length_of_xi_array; j++){
                    element_set(pre_poly[j], poly[j]);
                }
                for(j = length_of_xi_array - 1; j >= 0 ; j--){
                    //multiply the xi_array element to the previous poly
                    element_mul(pre_poly[j], pre_poly[j], invert_xi_array[i]);
                    //move the multiplication result to one higher degree
                    if(j == 0)
                        element_set0(poly[j]);//set the poly[0] to 0
                    else
                        element_set(poly[j], poly[j - 1]);
                    //added pre_poly and poly, to get a new poly array
                    element_add(poly[j], poly[j], pre_poly[j]);
                }
                /*compute the divisor*/
                element_add(temp_div, xi_array[k], invert_xi_array[i]);
                element_mul(divisor, divisor, temp_div);
            }
        }
        //compute Pk(x)
        for(m = 0; m < length_of_xi_array; m++){
            element_div(poly[m], poly[m], divisor);
            element_mul(poly[m], poly[m], yi_array[k]);
        }
        //get_poly_value(yi_array[1], poly, divisor, temp_div, length_of_xi_array);
        //add all the Pk(x) together, we will get P(x)
        for(m = 0; m < length_of_xi_array; m++){
            element_add(px[m], px[m], poly[m]);
        }
    }
    //element_set0(divisor);//x = 1
    //get_poly_value(yi_array[1], poly, divisor, temp_div, length_of_xi_array);
    printf("The overall polynomial Px is: \n");
    for(i = 0; i < length_of_xi_array; i++){
        element_printf("%B  ", px[i]);
    }
    printf("\n");
}

void get_formal_derivation(element_t *poly, element_t *derivative, int poly_length){
    int i = 0;
    for(i = poly_length - 1; i >= 0; i--){
        element_mul_si(derivative[i], poly[i], i);
    }
    for(i = 0; i < poly_length; i++){
        element_set(derivative[i], derivative[i + 1]);
    }
    printf("The derivative is: \n");
    for(i = 0; i < poly_length; i++){
        element_printf("%B  ", derivative[i]);
    }
    printf("\n");
}
int twiddle(int *x, int *y, int *z, int *p){
    int i, j, k;
    j = 1;
    while(p[j] <= 0)//until we met one which is non-zero
        j++;
    if(p[j-1] == 0){
        for(i = j - 1; i != 1; i--)
            p[i] = -1;
        p[j] = 0;
        *x = *z = 0;
        p[1] = 1;
        *y = j - 1;
    }
    else{
        if(j > 1)
        p[j - 1] = 0;
        do
        j++;
        while(p[j] > 0);
        k = j-1;
        i = j;
        while(p[i] == 0)
            p[i++] = -1;
        if(p[i] == -1){
            p[i] = p[k];
            *z = p[k] - 1;
            *x = i - 1;
            *y = k - 1;
            p[k] = -1;
        }
        else{
            if(i == p[0])//end of the combination, p[0] is n+1 all the time
                    //
                return(1);
            else{
                p[j] = p[i];
                *z = p[i] - 1;
                p[i] = 0;
                *x = j - 1;
                *y = i - 1;
            }
        }
    }
    return(0);
}

void inittwiddle(int m, int n, int *p)
{
    int i;
    p[0] = n+1;//size of p is n+2, first element is?
    for(i = 1; i != n-m+1; i++)
        p[i] = 0;
    while(i != n+1)//i begin with value of n-m+1, till n+1
    {
        p[i] = i+m-n;//p[i] in the range of 1 to m + 1
        i++;
    }
    p[n+1] = -2;//last element is?
    if(m == 0)
        p[1] = 1;
}

void choose_6_out_of_8( int *c, element_t *shares){
  int i, x, y, z, p[N+2], b[N], count = 0;
  inittwiddle(K, N, p);
  int a[N] = {0};
  for(i = 0; i < N; i++)
        a[i] = i + 1;
  for(i = N - K; i != N; i++){
        c[i - N + K] = a[i];
  }
  while(!twiddle(&x, &y, &z, p)){
        c[z] = a[x];
  }
}




