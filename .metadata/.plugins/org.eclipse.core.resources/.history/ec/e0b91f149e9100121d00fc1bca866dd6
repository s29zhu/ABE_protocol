/*
 * Owner.cc
 *
 *  Feb 28 2013
 *  Author: Shasha Zhu
 *
 */

#include "UCACPacket_m.h"
#include <grs.h>
#include "poly.h"
#include <message_handle.h>
#include <galois.h>
#include <pbc/pbc.h>
#include <iostream>
#include <cstring>

using namespace std;

typedef struct {
  field_t Fq, Fq2, Eq;
  int exp2, exp1;
  int sign1;
} *a_pairing_data_ptr;

typedef struct {
  field_ptr field; // The field where the curve is defined.
  element_t a, b;  // The curve is E: Y^2 = X^3 + a X + b.
  // cofac == NULL means we're using the whole group of points.
  // otherwise we're working in the subgroup of order #E / cofac,
  // where #E is the number of points in E.
  mpz_ptr cofac;
  // A generator of E.
  element_t gen_no_cofac;
  // A generator of the subgroup.
  element_t gen;
  // A non-NULL quotient_cmp means we are working with the quotient group of
  // order #E / quotient_cmp, and the points are actually coset
  // representatives. Thus for a comparison, we must multiply by quotient_cmp
  // before comparing.
  mpz_ptr quotient_cmp;
} *curve_data_ptr;

class OwnerProcess : public cSimpleModule
{
  private:
    pairing_t pairing;
    element_t g, alpha, secret_key, pub_key, g_pow_ra;//the last variable is g^ra which is saved for multiplication when D is done
    int consumerAddr;
    int masterAddr;
    int attributeAddr;
    int resourceAddr;
    int ownerAddr;
    int consumerProcId;
    int masterProcId;
    string attr[NUM_CONFINE];
    Token *sk_token;
    cGate *parentOutGate;
    element_t *qR;
//    element_t *ele_att_hash;
  public:
    OwnerProcess() : cSimpleModule(0) {}
    virtual void handleMessage(cMessage *m);
    virtual void initialize();

};

Define_Module( OwnerProcess );

void OwnerProcess::initialize(){
    cModule *parentMod = getParentModule();
    // retrieve parent's out gate
    parentOutGate = parentMod->gate("port$o");
   // pairing_t pairing;
   // element_t g, alpha, secret_key, pub_key;
    FILE *fp;

    char s[16384];

    fp = fopen("public/a.param", "r");
    if (!fp) {
        pbc_die("error opening parameter file");
    }
    size_t count = fread(s, 1, 16384, fp);

    if(!count){
        pbc_die("read parameter failure\n");
    }
    fclose(fp);
    pairing_init_set_buf(pairing, s, count);

    if(pairing_init_set_buf(pairing, s, count)){
        pbc_die("pairing init failed\n");
    }

    if(!pairing_is_symmetric(pairing)) pbc_die("pairing is not symmetric\n");

    element_init_G1(g, pairing);
    element_init_Zr(alpha, pairing);
    element_init_G1(secret_key, pairing);
    element_init_GT(pub_key, pairing);
    element_init_G1(g_pow_ra, pairing);

//    element_set(g, (*(curve_data_ptr) (*(*(a_pairing_data_ptr) (*pairing).data).Eq).data).gen);
    char str_g[512] = "[2080247391869362085132539778201998483380874841515454429046327131439543677740031077799512395854029182308535916504326748475626106457866048357583741668275635, 3462536684798900385254814488714127044393463459789164641468572493723203953888500069097792605858951898418781245583533869595156169194014075269175495278137832]";
    element_set_str(g, str_g, 10);
    element_random(alpha);
    element_pow_zn(secret_key, g, alpha);
    element_pairing(pub_key, g, secret_key);
    fp = fopen("owner/owner_secret_key.txt", "w+");
    if(!fp)
        pbc_die("error opening owner secret key file.");
    else{
        fprintf(fp, "secret key:");
        element_out_str(fp, 10, secret_key);
        fclose(fp);
    }
    fp = fopen("public/owner_public_key.txt", "w+");
    if(!fp)
        pbc_die("error opening error public key file.");
    else{
        fprintf(fp, "public key:");
        element_out_str(fp, 10, pub_key);
        fclose(fp);
    }

    /*encrypt the password into a header
    *All names of the variable is either enherited from the paper or from pbc
    *library
    */

    element_t h;
    element_t message_ele;
    element_t C;
    element_t C_tilde;
    element_t *ele_att_hash;
//    element_t *qR;
    element_t *Cy;
    element_t *Cy_prime;
    FILE *fp_write;
    int i = 0;
    int num_read = 0;
    char *str_read, *str1;
    char *m;
    string all_attr[NUM_ATTR];
    mpz_t message_mpz;

    //memory allocation starts here
    //qR array stores node-values of policy tree, there are NUM_SHARE + NUM_CONSUMER + 2 nodes
    //including the root node and the descriptive branch node
    qR = (element_t *)malloc(sizeof(element_t)*(NUM_ATTR + 2));
    ele_att_hash = (element_t *)malloc(sizeof(element_t)*NUM_ATTR);
    Cy = (element_t *)malloc(sizeof(element_t)*NUM_ATTR);
    Cy_prime = (element_t *)malloc(sizeof(element_t)*NUM_ATTR);
    str_read = (char *)malloc(sizeof(char)*500);
    str1 = (char *)malloc(sizeof(char)*500);
    m = (char *)malloc(sizeof(char)*512);

    //set confined attributes
    all_attr[0] = "http://www.servername.com/pathtofile";
    all_attr[1] = "Julia Zhu";
    all_attr[2] = "4";
    all_attr[3] = "r";
    all_attr[4] = "2013/01/10/13/20";
    all_attr[5] = "check string 1";
    all_attr[6] = "check string 2";
    //descriptive attributes, right now we only have one consumer
    all_attr[7] = "printer@printing.com";
    //initialize the elements to the coresponding type
    element_init_G1(h, pairing);
    element_init_G1(C, pairing);
    element_init_GT(C_tilde, pairing);
    mpz_init(message_mpz);
    element_init_GT(message_ele, pairing);

    //initialize the attributes and related elements
    for(i = 0; i < NUM_ATTR; i++){
        element_init_G1(ele_att_hash[i], pairing);
        element_from_hash(ele_att_hash[i], (void *)(all_attr[i].c_str()), all_attr[i].size());
        element_init_G1(Cy[i], pairing);
        element_init_G1(Cy_prime[i], pairing);
    }
    //set the global attributes
    for(i = 0; i < NUM_CONFINE; i++){
        attr[i] = all_attr[i];
    }
    //randomly pick the nodes' values qR[i] and save them into a file
    fp = fopen("owner/nodes_value_of_tree.txt", "w+");
    if(!fp)
        pbc_die("error opening the tree value file");
    //choose THRESH_HOLD + 1 random numbers for nodes, 1 for root node
    for(i = 0; i < THRESH_HOLD + 1; i++){
        element_init_Zr(qR[i], pairing);
        element_random(qR[i]);
        fprintf(fp, "qR(%d):", i);
        element_out_str(fp, 10, qR[i]);
        fprintf(fp, "\n");
    }

    element_t poly[THRESH_HOLD + 1], pre_poly[THRESH_HOLD + 1], px[THRESH_HOLD + 1],xi_array[THRESH_HOLD + 1],
               invert_xi_array[THRESH_HOLD + 1], invert_yi_array[THRESH_HOLD + 1], divisor, temp_div, x, x_temp, y;
    element_init_Zr(divisor, pairing);
    element_init_Zr(temp_div, pairing);
    element_init_Zr(y, pairing);
    element_init_Zr(x, pairing);
    element_init_Zr(x_temp, pairing);
    for(i = 0; i < THRESH_HOLD + 1; i++){
        element_init_Zr(poly[i], pairing);
        element_init_Zr(pre_poly[i], pairing);
        element_init_Zr(px[i], pairing);
        element_init_Zr(xi_array[i], pairing);
        element_init_Zr(invert_xi_array[i], pairing);
        element_init_Zr(invert_yi_array[i], pairing);
    }

    get_px(px,//element_t *
            poly,//element_t *
            pre_poly,//element_t *
            xi_array,//element_t *
            invert_xi_array,//element_t *
            qR,//element_t * yi_array
            invert_yi_array,//element_t *
            THRESH_HOLD + 1,//int
            divisor,//element_t
            temp_div);//element_t
    element_clear(divisor);
    element_clear(temp_div);
    for(i = 0; i < THRESH_HOLD + 1; i++){
        element_clear(poly[i]);
        element_clear(pre_poly[i]);
        element_clear(xi_array[i]);
        element_clear(invert_xi_array[i]);
        element_clear(invert_yi_array[i]);
    }
    //use the interpolated polynomial to compute the value of other nodes
    for(i = THRESH_HOLD + 1; i < NUM_CONFINE + 2; i++){
        element_init_Zr(qR[i], pairing);
        get_poly_value(qR[i], px, x, x_temp, THRESH_HOLD + 1);
        fprintf(fp, "qR(%d):", i);
        element_out_str(fp, 10, qR[i]);
        fprintf(fp, "\n");
    }
    //set the descriptive nodes to the same value as the threshhold value
    for(i = NUM_CONFINE + 2; i < NUM_ATTR + 2; i++){
        element_init_Zr(qR[i], pairing);
        element_set(qR[i], qR[NUM_CONFINE + 1]);
        fprintf(fp, "qR(%d):", i);
        element_out_str(fp, 10, qR[i]);
        fprintf(fp, "\n");
    }
    //Following is the encryption part
    //compute Cs and C_primes of confined parts
    for(i = 0; i < NUM_CONFINE; i++){
        //element_printf("1--%B\n", g);
        element_pow_zn(Cy[i], g, qR[i + 1]);//the footnote of qR starts from 1 to NUM_CONFINE, qR[0] is the secret s.
        //element_printf("2--%B\n", Cy[i]);
        element_pow_zn(Cy_prime[i], ele_att_hash[i], qR[i + 1]);
    }
    //compute Cs and C_primes of descriptive parts
    for(i = NUM_CONFINE; i < NUM_ATTR; i++){
        //element_printf("1--%B\n", g);
        element_pow_zn(Cy[i], g, qR[i + 2]);
        //element_printf("2--%B\n", Cy[i]);
        element_pow_zn(Cy_prime[i], ele_att_hash[i], qR[i + 2]);
    }
    //read out the public key h of authorizer
    fp = fopen("public/authorizer_public_keys.txt", "r");
    if(!fp)
        pbc_die("open authorizer public key file failed");
    else{
        while(true){
            fgets(str_read, 500, fp);
            strncpy(str1, str_read, 2);
            if(strstr(str_read, "h:")){
                fgets(str1, 500, fp);
                strcat(str_read, str1);
              // printf("%s\n", str_read);
                break;
            }
        }
        element_set_str(h, str_read + 2, 10);
        fclose(fp);
    }
    //compute C = h^s
    element_pow_zn(C, h, qR[0]);
    //compute pre-c_tilde = e(g, g)^(alpha*s)
    element_pow_zn(C_tilde, pub_key, qR[0]);

    //read out the message and
    fp = fopen("owner/password.txt", "r");
    if(!fp)
        pbc_die("fail to open the message file");
    else{
        fp_write = fopen("resource_server/encryption_header.txt", "w");
        if(!fp_write)
            pbc_die("creat encryption file failed");
        fprintf(fp_write, "C_tilde:");
        while(true){
            num_read = fread(str_read, 1, 100, fp);
            str_read[num_read] = '\0';
           // printf("%s%d\n", str_read, num_read);
           //we need to initialize m_mpz to 0 in order to start a another round
           //of encryption.
           mpz_init(message_mpz);
           messageToValue(str_read, message_mpz, m);

           strcpy(str_read, "[");
           strcat(str_read, m);
           strcat(str_read, ",0]");
           element_set_str(message_ele, str_read, 10);
           //multiply it by e(g,g)^(alpha*s) to get the real C_tilde
           element_mul(C_tilde, C_tilde, message_ele);
           //write the encrypted data to file
           element_out_str(fp_write, 10, C_tilde);
           if(feof(fp)){
                break;
            }
        }
        fprintf(fp_write, "\nC:");
        element_out_str(fp_write, 10, C);
        //write the Cy and Cy_prime into the file
        // i starts from 1, because qR[0] is secret s that we want to protect, qR[1], qR[2], ...,
        // qR[NUM_SHARE] are the secret shares
        for(i = 0; i < NUM_ATTR; i++){
            fprintf(fp_write,"\nCy[%d]:", i);
            element_out_str(fp_write, 10, Cy[i]);
            fprintf(fp_write, "\nCy_prime[%d]:", i);
            element_out_str(fp_write, 10, Cy_prime[i]);
        }
        fclose(fp);
        fclose(fp_write);
    }
    //clear the element_t and pairing_t and free the capacity

    free(str1);
    free(m);
    free(str_read);
    element_clear(C);
    element_clear(C_tilde);
    mpz_clear(message_mpz);
    element_clear(message_ele);
    for(i = 0; i < NUM_SHARE; i++){
        element_clear(ele_att_hash[i]);
        element_clear(Cy[i]);
        element_clear(Cy_prime[i]);
    }
/*   for(i = 0; i < NUM_ATTR + 2; i++){
       element_clear(qR[i]);
   }*/
//    pairing_clear(pairing);
    sk_token = new Token;
    element_init_G1(sk_token->D, pairing);
      for(i = 0; i < NUM_SHARE; i++){
        element_init_G1(sk_token->Di[i], pairing);
        element_init_G1(sk_token->Di_prime[i], pairing);
    }
    //set handleMessage() to work
    //send connection request to consumer

    //set the ip address according to the port sequence, see UCACnet.ned about the ports
    //gate("port$o")->getNextGate() is the in-gate that in cloud
    //cloud has number of owners and consumer, master, attribute, and resource gates
    int max = parentOutGate->getNextGate()->size()-1;
    consumerAddr = max - 3;
    masterAddr = max - 2;
    attributeAddr = max - 1;
    resourceAddr = max;
    ownerAddr = parentOutGate->getNextGate()->getIndex();
    consumerProcId = 0;
    masterProcId = 0;
    WATCH(consumerProcId);
    WATCH(masterProcId);
    WATCH(consumerAddr);
    WATCH(masterAddr);
    WATCH(attributeAddr);
    WATCH(resourceAddr);
    UCACPacket *conn = new UCACPacket("connection request from owner to consumer", CONN_REQ);
    conn->setSrcAddress(ownerAddr);
    conn->setDestAddress(consumerAddr);
    conn->setSrcProcId(getId());
    sendDirect(conn, parentOutGate);
//    UCACPacket *starter = new UCACPacket("owner start message", 100);
//    simtime_t current_time = simTime();
//    scheduleAt(current_time + 0.01, starter);
}

void OwnerProcess::handleMessage(cMessage *msg)
{
    UCACPacket *m = check_and_cast<UCACPacket *>(msg);
    for(;;){
        if (ev.isGUI()) getDisplayString().setTagArg("i",1,"");
        if (ev.isGUI()) getDisplayString().setTagArg("i",1,"green");

        if(m->getKind() == CONN_ACK){
            if(m->getSrcAddress() == consumerAddr){
                consumerProcId = m->getSrcProcId();
                UCACPacket *prt_req = new UCACPacket("owner send to consumer print request", PRNT_REQ);
                prt_req->setSrcAddress(ownerAddr);
                prt_req->setDestAddress(consumerAddr);
                prt_req->setDestProcId(consumerProcId);
                prt_req->setSrcProcId(getId());
                sendDirect(prt_req, parentOutGate);
                delete m;
                break;
            }else if(m->getSrcAddress() == masterAddr){
                masterProcId = m->getSrcProcId();
                UCACAuthenticatePacket *authen = new UCACAuthenticatePacket("owner authenticate itself to authorizer", AUTN_REQ);
                authen->setSrcAddress(ownerAddr);
                authen->setDestAddress(masterAddr);
                authen->setDestProcId(masterProcId);
                authen->setSrcProcId(getId());
                authen->setID("shashazhu");
                authen->setCredential("password");
                sendDirect(authen, parentOutGate);
                delete m;
                break;
            }
        }
        //if consumer redirect the owner to authenticate itself to authorizer
        if(m->getKind() == REDIRECT){
            //send out the info of consumer to master
            UCACRedirectPacket *m_final = check_and_cast<UCACRedirectPacket *>(msg)->dup();
            m_final->setSrcAddress(ownerAddr);
            m_final->setDestAddress(masterAddr);
            m_final->setKind(CONN_REQ);
            m_final->setName("owner redirected to authorizer by consumer");
            sendDirect(m_final, parentOutGate);
            delete m;
            break;
        }

       if(m->getKind() == AUTN_RES){
           int i = 0 ;
           UCACAttrPacket *confined_attr = new UCACAttrPacket("owner send out confined attr to master", CONFINED_D_REQ);
           confined_attr->setSrcAddress(ownerAddr);
           confined_attr->setDestAddress(masterAddr);
           confined_attr->setDestProcId(m->getSrcProcId());
           confined_attr->setSrcProcId(getId());
           for(i = 0; i < NUM_CONFINE; i++){
               confined_attr->setAttr(i, attr[i].c_str());
           }
           sendDirect(confined_attr, parentOutGate);
          /* element_t hash_elements[NUM_SHARE];
           printf("in owner, hash value\n");
           for(i = 0; i < NUM_CONFINE; i++){
               element_init_G1(hash_elements[i], pairing);
               element_from_hash(hash_elements[i], (void *)confined_attr->getAttr(i), attr[i].size());
               element_printf("%B\n", hash_elements[i]);
           }*/
           delete m;
           break;
       }
       //Received the confined attributes, partial D and part1 of descriptive attr from authorizer
       if(m->getKind() == CONFINED_D_RES){
           UCACTokenPacket *token_packet = check_and_cast<UCACTokenPacket *>(msg)->dup();
           int i = 0;
          /* printf("*************************************************************************************\n");
           element_printf("owner received token from authority.\nD = %B\n", token_packet->getSk_token().D);
           for(i = 0; i < NUM_SHARE; i++){
               element_printf("D[i] = %B\n", token_packet->getSk_token().Di[i]);
               element_printf("D[i]_prime = %B\n", token_packet->getSk_token().Di_prime[i]);
           }*/
           element_set(sk_token->D, token_packet->getSk_token().D);
           for(i = 0; i < NUM_SHARE; i++){
               element_set(sk_token->Di[i], token_packet->getSk_token().Di[i]);
               element_set(sk_token->Di_prime[i], token_packet->getSk_token().Di_prime[i]);
           }
           element_t D, a;
           element_init_G1(D, pairing);
           element_init_Zr(a, pairing);
           element_random(a);
           element_set(D, token_packet->getSk_token().D);
           element_pow_zn(D, D, a);//g^ra
           //save g^ra for later use
           element_set(g_pow_ra, D);
           element_t pairing_result, g_pow_qR;
           element_init_GT(pairing_result, pairing);
           element_init_G1(g_pow_qR, pairing);

           //print out these values for debuging
           printf("owner shares\n");
           for(i = 0; i < NUM_CONFINE; i++){
               element_pow_zn(g_pow_qR, g, qR[i + 1]);
               element_pairing(pairing_result, g_pow_ra, g_pow_qR);
               element_printf("%B\n", pairing_result);
           }
           for(i = NUM_CONFINE; i < NUM_SHARE; i++){
               element_pow_zn(g_pow_qR, g, qR[i + 2]);
               element_pairing(pairing_result, g_pow_ra, g_pow_qR);
               element_printf("%B\n", pairing_result);
           }

           //element_printf("secret_key = %B\nD = %B\n", secret_key, token_packet->getSk_token().D);
           element_mul(D, D, secret_key);//g^(alpha+ra)
           element_set(sk_token->D, D);
           token_packet->setKind(D_REQ);
           token_packet->setSrcAddress(ownerAddr);
           token_packet->setDestAddress(masterAddr);
           token_packet->setDestProcId(masterProcId);
           token_packet->setSrcProcId(getId());
           token_packet->setName("owner request the authority to finish compute D");
           token_packet->setSk_token(*sk_token);
           sendDirect(token_packet, parentOutGate);
           element_clear(D);
           element_clear(a);
           delete m;
           break;
       }
       //finally, owner send the completed D and part1, confined attributes of part2 to consumer
       if(m->getKind() == D_RES){
           UCACTokenPacket *token_packet = check_and_cast<UCACTokenPacket *>(msg)->dup();
           element_set(sk_token->D, token_packet->getSk_token().D);
           int i = 0;
           for(i = 0; i < NUM_SHARE; i++){
               element_mul(sk_token->Di[i], sk_token->Di[i], g_pow_ra);
           }
           token_packet->setKind(TOKEN);
           token_packet->setSrcAddress(ownerAddr);
           token_packet->setDestAddress(consumerAddr);
           token_packet->setDestProcId(consumerProcId);
           token_packet->setSrcProcId(getId());
           token_packet->setSk_token(*sk_token);
           token_packet->setName("owner send token to consumer");
           sendDirect(token_packet, parentOutGate);
           delete m;
           break;
       }
       break;
    }
}
