/*
 * Owner.cc
 *
 *  Feb 28 2013
 *  Author: Shasha Zhu
 *
 */

#include "UCACPacket_m.h"
#include <grs.h>
#include <message_handle.h>
//#include <polynomial.h>
#include <galois.h>
#include <pbc/pbc.h>
#include <pbc/pbc_test.h>
#include "generate_owner_keys.h"
#include <iostream>

using namespace std;

typedef struct {
  field_t Fq, Fq2, Eq;
  int exp2, exp1;
  int sign1;
} *a_pairing_data_ptr;

typedef struct {
  field_ptr field; // The field where the curve is defined.
  element_t a, b;  // The curve is E: Y^2 = X^3 + a X + b.
  // cofac == NULL means we're using the whole group of points.
  // otherwise we're working in the subgroup of order #E / cofac,
  // where #E is the number of points in E.
  mpz_ptr cofac;
  // A generator of E.
  element_t gen_no_cofac;
  // A generator of the subgroup.
  element_t gen;
  // A non-NULL quotient_cmp means we are working with the quotient group of
  // order #E / quotient_cmp, and the points are actually coset
  // representatives. Thus for a comparison, we must multiply by quotient_cmp
  // before comparing.
  mpz_ptr quotient_cmp;
} *curve_data_ptr;

//#define STACKSIZE 16384
#define STACKSIZE  8000
class Owner : public cSimpleModule
{
  public:
    Owner() : cSimpleModule(STACKSIZE) {}
    virtual void activity();
    virtual void initialize();
};

Define_Module( Owner );

void Owner::initialize(){
    pairing_t pairing;
    element_t g, alpha, secret_key, pub_key;
    FILE *fp;
    char s[16384];
/*    static const char *parameter = "type a\n"
            "q 8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791\n"
            "h 12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776\n"
            "r 730750818665451621361119245571504901405976559617\n"
            "exp2 159\n"
            "exp1 107\n"
            "sign1 1\n"
            "sign0 1";*/
    fp = fopen("public/a.param", "r");
    if (!fp) {
        pbc_die("error opening parameter file");
    }
    size_t count = fread(s, 1, 16384, fp);

    if(!count){
        pbc_die("read parameter failure\n");
    }
    fclose(fp);
    pairing_init_set_buf(pairing, s, count);
    cout<<"error"<<endl;
    if(pairing_init_set_buf(pairing, s, count)){
        pbc_die("pairing init failed\n");
    }
    if(!pairing_is_symmetric(pairing)) pbc_die("pairing is not symmetric\n");
    cout<<"error"<<endl;
    element_init_G1(g, pairing);
    element_init_Zr(alpha, pairing);
    element_init_G1(secret_key, pairing);
    element_init_GT(pub_key, pairing);

    element_set(g, (*(curve_data_ptr) (*(*(a_pairing_data_ptr) (*pairing).data).Eq).data).gen);
    element_random(alpha);
    element_pow_zn(secret_key, g, alpha);
    element_pairing(pub_key, g, secret_key);
    fp = fopen("owner_secret_key.txt", "w+");
    if(!fp)
        pbc_die("error opening owner secret key file.");
    else{
        fprintf(fp, "secret key:");
        element_out_str(fp, 10, secret_key);
        fclose(fp);
    }
    fp = fopen("public/owner_public_key.txt", "w+");
    if(!fp)
        pbc_die("error opening error public key file.");
    else{
        fprintf(fp, "public key:");
        element_out_str(fp, 10, pub_key);
        fclose(fp);
    }
    element_clear(g);
    element_clear(alpha);
    element_clear(secret_key);
    element_clear(pub_key);

}
void Owner::activity()
{
    // query module parameters
    //simtime_t timeout1 = par("timeout1");
    //simtime_t timeout2 = par("timeout2");
    //simtime_t timeout3 = par("timeout3");
    cPar& connectionIaTime = par("connIaTime");
    cPar& graCompTime = par("graTime");

    // assign owner address: index of Switch's gate to which we are connected
    int myAddr = gate("port$o")->getNextGate()->getIndex(); WATCH(myAddr);

    // assign server address: index of Switch's gate to which servers are connected
    int maxIndex = gate("port$o")->getNextGate()->size()-1;
    int consumerAddr = maxIndex-3; WATCH(consumerAddr);
    int masterAddr = maxIndex-2; WATCH(masterAddr);
    int attributeAddr = maxIndex-1; WATCH(attributeAddr);
    int resourceAddr = maxIndex; WATCH(resourceAddr);

    // connection information for server side
    int consumerProcId = 0; WATCH(consumerProcId);
    int masterProcId = 0; WATCH(masterProcId);

    // declare for statistic records
    simtime_t createTime; WATCH(createTime);
    simtime_t latencyTime; WATCH(latencyTime);
    simsignal_t latencySignal;

    latencySignal = registerSignal("latency");

    UCACPacket *connReq, *connAck, *discReq, *discAck;
    UCACPacket *sendPkt, *recvPkt;
    UCACPacket *pk;

    //
    // setup connecting to consumer
    //
    //generate_owner_keys();
    cout<<"error"<<endl;
    for(;;)
    {
        if (ev.isGUI()) getDisplayString().setTagArg("i",1,"");

        // keep an interval between subsequent connections
        wait( (double)connectionIaTime );

        // Setup connection to Consumer
        if (ev.isGUI()) getDisplayString().setTagArg("i",1,"green");

        connReq = new UCACPacket("CONN_REQ", CONN_REQ);
        connReq->setSrcAddress(myAddr);
        connReq->setDestAddress(consumerAddr);

        // record message creation-time of print request
        createTime = connReq->getCreationTime();
        EV << "owner: creation time of print request message = " << createTime << endl;

        send( connReq, "port$o" );
        EV << "owner: sending CONN_REQ to server addr = " << consumerAddr << endl;

        // waiting for CONN_ACK from consumer
        //connAck = (UCACPacket *) receive(timeout1); // 1 step
        connAck = (UCACPacket *) receive(); // 1 step

        //if (connAck==NULL)
        //    goto brokenConsumer;

	    if (connAck->getKind()==CONN_ACK) {
	    	// retrieve server process ID
	        consumerProcId = connAck->getSrcProcId();
	        EV << "owner: got CONN_ACK from consumer process ID = " << consumerProcId << endl;
	        delete connAck;
	    }
	    else
	    	error("owner: connect protocol error!");

        if (ev.isGUI())
        {
            getDisplayString().setTagArg("i",1,"gold");
            bubble("Connected!");
        }

        //
        // consumer is connecting to resource
        //

    	// initial print request at consumer
    	sendPkt = new UCACPacket("PRNT_REQ", PRNT_REQ);
    	sendPkt->setSrcAddress(myAddr);
    	sendPkt->setDestAddress(consumerAddr);
    	sendPkt->setDestProcId(consumerProcId);
    	send(sendPkt, "port$o");
    	EV << "owner: 0 sent Print Request to consumer\n";

    	// waiting for redirecting (AUTZ_REQ) from consumer to master
    	//pk = (UCACPacket *) receive(timeout1); // 2 steps
    	pk = (UCACPacket *) receive(); // 2 steps

    	//if (pk==NULL)
    	//	goto brokenConsumer;

    	if (pk->getKind()==AUTZ_REQ)
    		EV << "owner: got Redirect (AUTZ_REQ)\n";
    	else
    		error("owner: redirect (AUTZ_REQ) protocol error!");
        //
        // setup connecting to master
        //
    	for(;;) {
        	// Setup connection to Master
        	connReq = new UCACPacket("CONN_REQ", CONN_REQ);
        	connReq->setSrcAddress(myAddr);
        	connReq->setDestAddress(masterAddr);
        	send( connReq, "port$o" );
        	EV << "owner: sent CONN_REQ to server addr = " << masterAddr << endl;

        	// waiting for CONN_ACK from master
        	//connAck = (UCACPacket *) receive(timeout1); // 1 step
        	connAck = (UCACPacket *) receive(); // 1 step

        	//if (connAck==NULL)
        	//	goto brokenMaster;

        	if (connAck->getKind()==CONN_ACK) {
        		// retrieve server process ID
        		masterProcId = connAck->getSrcProcId();
        		EV << "owner: got CONN_ACK from master process ID = " << masterProcId << endl;
        		delete connAck;
        	}
        	else
        		error("owner: connect protocol error!");

        	// redirect authorize request to master
        	pk->setName("AUTZ_REQ");
        	pk->setKind(AUTZ_REQ);
        	pk->setSrcAddress(myAddr);
        	pk->setDestAddress(masterAddr);
        	pk->setDestProcId(masterProcId);
        	send(pk, "port$o");
        	EV << "owner: 3 sent Authorize Request\n";

        	// authenticated by master
        	//pk= (UCACPacket *) receive(timeout1); // 1 step
        	pk= (UCACPacket *) receive(); // 1 step

        	//if (pk==NULL)
        	//	goto brokenMaster;

        	if (pk->getKind()==AUTN_REQ)
        		EV << "owner: got Authenticate Request\n";
        	else
        		error("owner: authenticate protocol error!");

        	// sending owner credential to master
        	pk->setName("AUTN_RES");
        	pk->setKind(AUTN_RES);
        	pk->setSrcAddress(myAddr);
        	pk->setDestAddress(masterAddr);
        	pk->setDestProcId(masterProcId);
        	send(pk, "port$o");
        	EV << "owner: 4.2 sent Authenticate Response\n";

        	// assign allowed attributes to master
        	EV << "pick up a,r then computing exponentiation for g^(ra)\n";
        	wait( (double)graCompTime );

        	sendPkt = new UCACPacket("ATTR_REQ", ATTR_REQ);
        	sendPkt->setSrcAddress(myAddr);
        	sendPkt->setDestAddress(masterAddr);
        	sendPkt->setDestProcId(masterProcId);
        	send(sendPkt, "port$o");
        	EV << "owner: 5 sent Attribute Request\n";

        	//
        	// master is connecting to attribute
        	//


            // waiting for Redirect (ATTR_RES) from master to consumer
        	//pk = (UCACPacket *) receive(timeout2); // 6 steps
        	pk = (UCACPacket *) receive(); // 6 steps

        	//if (pk==NULL)
        	//	goto brokenMaster;

        	if (pk->getKind()==ATTR_RES)
        		EV << "owner: got redirect (ATTR_RES)\n";
        	else
        		error("owner: redirect (ATTR_RES) protocol error!");

        	// connection tear down
        	EV << "owner: sent DISC_REQ\n";
        	discReq = new UCACPacket("DISC_REQ", DISC_REQ);
        	discReq->setSrcAddress(myAddr);
        	discReq->setDestAddress(masterAddr);
        	discReq->setDestProcId(masterProcId);
        	send(discReq, "port$o");

        	//discAck = (UCACPacket *) receive(timeout1); // 1 step
        	discAck = (UCACPacket *) receive(); // 1 step

        	//if (discAck==NULL)
        	//	goto brokenMaster;

        	if (discAck->getKind()==DISC_ACK) {
        		EV << "owner: got DISC_ACK\n";
        		delete discAck;
        		break;
        	}
        	else
        		error("owner: disconnect protocol error!");

        // error handling
        //brokenMaster:
        //	EV << "owner: Timeout since master connection broken!\n";
        //	if (ev.isGUI()) bubble("Connection broken!");
        }
        //
        // end connecting to master
        //

    // redirect AUTZ_RES to consumer
    pk->setName("AUTZ_RES");
    pk->setKind(AUTZ_RES);
    pk->setSrcAddress(myAddr);
    pk->setDestAddress(consumerAddr);
    pk->setDestProcId(consumerProcId);
    send(pk, "port$o");
    EV << "owner: 7 sent Authorize Response\n";

    // sent Confined set-1, Descriptive set-1 and owner private-key to consumer.

	// EV << "delay for computing ElGamal";
	// wait( (double)graCompTime );

    sendPkt = new UCACPacket("OWNER_SK", OWNER_SK);
    sendPkt->setSrcAddress(myAddr);
    sendPkt->setDestAddress(consumerAddr);
    sendPkt->setDestProcId(consumerProcId);
    send(sendPkt, "port$o");
    EV << "owner: 8 sent Owner SK\n";

    //
    // consumer is connecting to attribute
    // and transfer files from resource
    //

    //waiting for Print Response from consumer
    //recvPkt = (UCACPacket *) receive(timeout3); // 10 steps
    recvPkt = (UCACPacket *) receive(); // 10 steps

    //if (recvPkt==NULL)
    //	goto brokenConsumer;

    if (recvPkt->getKind()==PRNT_RES) {
    	EV << "owner: got Print Response\n";

    	// calculate latency time of print request
    	latencyTime = recvPkt->getArrivalTime() - createTime;
    	EV << "owner: latency time of printing request = " << latencyTime << endl;
    	emit(latencySignal, latencyTime);
    	delete recvPkt;
    }
    else
     	error("owner: print protocol error!");

    if (ev.isGUI()) getDisplayString().setTagArg("i",1,"blue");

    // connection tear down
    EV << "owner: sent DISC_REQ\n";
    discReq = new UCACPacket("DISC_REQ", DISC_REQ);
    discReq->setSrcAddress(myAddr);
    discReq->setDestAddress(consumerAddr);
    discReq->setDestProcId(consumerProcId);
    send(discReq, "port$o");

    //discAck = (UCACPacket *) receive(timeout1);
    discAck = (UCACPacket *) receive();

    //if (discAck==NULL)
    //	goto brokenConsumer;

    if (discAck->getKind()==DISC_ACK) {
    	EV << "owner: got DISC_ACK\n";
    	delete discAck;
    	if (ev.isGUI()) bubble("Disconnected!");
        continue;
    }
    else
    	error("owner: disconnect protocol error!");

    // error handling
    //brokenConsumer:
    //	EV << "owner: Timeout since consumer connection broken!\n";
    //	if (ev.isGUI()) bubble("Connection broken!");
    }
}
