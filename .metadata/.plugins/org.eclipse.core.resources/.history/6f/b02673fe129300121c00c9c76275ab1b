/*
 * Owner.cc
 *
 *  Feb 28 2013
 *  Author: Shasha Zhu
 *
 */
#include "poly.h"

void get_poly_value(element_t y, element_t *poly, element_t x, element_t x_temp, int poly_length){
    int i = 0;
    mpz_t i_mpz;
    mpz_init(i_mpz);
    element_set0(y);
    element_printf("element x = %B\n", x);
    if(element_is0(x)){
        element_set(y, poly[0]);
    }else if(element_is1(x)){//something wrong with x = 1 case, debugging here, should delete this later
        for(i = 0; i < poly_length; i++){
            element_add(y, y, poly[i]);
           // element_printf("temp y = %B  poly[i]= %B\n", y, poly[i]);
        }
    }else{
        for(i = 0; i < poly_length; i++){
            element_set(x_temp, x);
            mpz_set_si(i_mpz, i);
            element_pow_mpz(x_temp, x_temp, i_mpz);
            element_mul(x_temp, x_temp, poly[i]);
            element_add(y, y, x_temp);
        }
    }
    element_printf("value of the poly = %B\n", y);
}

//get (x+x0)(x+x1)...(x+x6)
//array stores polynomial coefficients, [0] stors constant, [1] stores degree 1 and so on
void get_px(element_t *px,//output of the function, final polynamial p(x)
        element_t *poly,//denominator polynomials
        element_t *pre_poly,
        element_t *xi_array,//solution of the final polynomial p(x)
        element_t *invert_xi_array,
        element_t *yi_array,
        element_t *invert_yi_array,
        int length_of_xi_array,
        element_t divisor,//nominator for each denominator polynomial
        element_t temp_div){

    int i = 0, j = 0, k = 0, m = 0;
    for(i = 0; i < length_of_xi_array; i++){
        element_neg(invert_xi_array[i], xi_array[i]);
        element_printf("invert[%d] = %B x[%d] = %B\n", i, invert_xi_array[i], i, xi_array[i]);
        element_printf("yi_array[%d] = %B\n", i, yi_array[i]);
    }
    //we use invert_xi_array instead of xi_array which will leave us only deal with the value not their signs
    for(k = 0; k < length_of_xi_array; k++){
        //initialize poly array
        element_set1(poly[0]);
        for(j = 1; j < length_of_xi_array; j++){
            element_set0(poly[j]);
        }
        element_set1(divisor);
        for(i = 0; i < length_of_xi_array; i++){
            if(i != k){
                /*computer the denominator*/
                //save the re-multiplication polynomial
                for(j = 0; j < length_of_xi_array; j++){
                    element_set(pre_poly[j], poly[j]);
                }
                for(j = length_of_xi_array - 1; j >= 0 ; j--){
                    //multiply the xi_array element to the previous poly
                    element_printf("1pre_poly[%d] = %B\n", j, pre_poly[j]);
                    element_mul(pre_poly[j], pre_poly[j], invert_xi_array[i]);
                    element_printf("2pre_poly[%d] = %B\n", j, pre_poly[j]);
                    //move the multiplication result to one higher degree
                    if(j == 0)
                        element_set0(poly[j]);//set the poly[0] to 0
                    else
                        element_set(poly[j], poly[j - 1]);
                    element_printf("1poly[%d] = %B\n", j, poly[j]);
                    //added pre_poly and poly, to get a new poly array
                    element_add(poly[j], poly[j], pre_poly[j]);
                    element_printf("2poly[%d] = %B\n", j, poly[j]);
                }
                /*compute the divisor*/
                element_add(temp_div, xi_array[i], invert_xi_array[k]);
                element_mul(divisor, divisor, temp_div);
            }
        }
        element_printf("divisor = %B\nyi_array[%d]= %B\n", divisor, k, yi_array[k]);
        //compute Pk(x)
        for(i = 0; i < length_of_xi_array; i++){
            element_printf("denominator poly[%d] = %B\n", i, poly[i]);
        }
        for(m = 0; m < length_of_xi_array; m++){
            element_div(poly[m], poly[m], divisor);
            element_mul(poly[m], poly[m], yi_array[k]);
        }
        for(i = 0; i < length_of_xi_array; i++){
            element_printf("Pk[%d] = %B\n", i, poly[i]);
        }
 //       get_poly_value(yi_array[1], poly, divisor, temp_div, length_of_xi_array);
        //add all the Pk(x) together, we will get P(x)
        for(m = 0; m < length_of_xi_array; m++){
            element_add(px[m], px[m], poly[m]);
        }
    }
            element_set1(divisor);//x = 1
            get_poly_value(yi_array[1], poly, divisor, temp_div, length_of_xi_array);
    printf("The overall polynomial Px is: \n");
    for(i = 0; i < length_of_xi_array; i++){
        element_printf("%B  ", px[i]);
    }
    printf("\n");
}

void get_formal_derivation(element_t *poly, element_t *derivative, int poly_length){
    int i = 0;
    for(i = poly_length - 1; i >= 0; i--){
        element_mul_si(derivative[i], poly[i], i);
    }
    for(i = 0; i < poly_length; i++){
        element_set(derivative[i], derivative[i + 1]);
    }
    printf("The derivative is: \n");
    for(i = 0; i < poly_length; i++){
        element_printf("%B  ", derivative[i]);
    }
    printf("\n");
}


