/*
 * MasterProcess.cc
 *
 *  Created on: Mar 8, 2013
 *      Author: s29zhu
 */
#ifndef __GRS_H__
#define __GRS_H__
#include <cstddef>
#include <ostream>
#include <iostream>
#include "galois.h"
#include "pbc/pbc.h"
#include <cstdbool>
#include <cstdio>
#include <cstdlib>

using namespace std;
#define N 8 //length of codeword, also the number of secret shares
#define M (N - 1) //use M*N matrix to compute column multipliers of parity check
                //matrix
#define K (N - 2) //length of information word
//number of shares that consumer must get
#define NUM_SHARE N
//number of consumers
#define NUM_CONSUMER 1
#define NUM_CONFINE  (NUM_SHARE - 1)
#define NUM_ATTR  (NUM_CONFINE + NUM_CONSUMER)
#define ERROR_NUM 1
#define THRESH_HOLD 6//degree of polynomial is 5

typedef struct PotentialShares{
    element_t shares[N];//save the potential shares
    PotentialShares *next;
    unsigned int count;//keep track of how many same share_array we have got
};

template<std::size_t row_size, std::size_t colomn_size>
extern void ComputeMultipliers(element_t (&code_locators)[row_size][colomn_size],
            element_t *multipliers,
            element_t elimination,
            element_t *add_vector,
            element_t *add_temp){

    //i and k are row index, j is column index
    int i = 0, j = 0, k = 0;
    //printf("****%d\n", galois_single_divide(11, 6, 4));
    //eliminate the first M - 1 elements
    for(i = 0; i < M - 1; i++){
        element_set(elimination, code_locators[i][i]);
//        cout<<"add vectors"<<endl;
        for(j = i; j < N; j++){
            //code_locators[i][j] = 0;
            element_div(code_locators[i][j], code_locators[i][j], elimination);
            /*the will be eliminated element is replaced by the add_vector
            multiply by other elements*/
            element_set(add_vector[j], code_locators[i][j]);
//            element_printf("%B  ", add_vector[j]);
        }
        /*for every row of the matrix, replace the will-be-eliminated element with
        *the add vector. code_locators[k][i] is the will-be-eliminated element.
        */
        for(k = i + 1; k < M; k++){
            element_set(elimination, code_locators[k][i]);
            for(j = i; j < N; j++){
                element_mul(add_temp[j], add_vector[j], elimination);
                element_sub(code_locators[k][j], code_locators[k][j], add_temp[j]);
//                element_printf("%B  ",code_locators[k][j]);
            }
        }
    }
    //set the last row [i][i] to 1
    element_set(elimination, code_locators[i][i]);
    for(j = i; j < N; j++){
        //code_locators[i][j] = 0;
        element_div(code_locators[i][j], code_locators[i][j], elimination);
    }

    /*now there are M equations and there are N multipliers. we set the multiplier[N-1] = 1
    *and hence get the value of other N - 1 i.e. M multipliers.
    */
//    cout<<"multipliers"<<endl;
    for(i = N - 1; i > M - 1; i--){
        element_set1(multipliers[i]);
    }
    for(i = M - 1; i >= 0; i--){
        element_set0(multipliers[i]);
        for(j = i + 1; j < N; j++){
            element_mul(code_locators[i][j], code_locators[i][j], multipliers[j]);
            element_sub(multipliers[i], multipliers[i], code_locators[i][j]);
        }
    }
    for(i = 0; i < N; i++){
//        element_printf("%B  ", multipliers[i]);
    }
//    cout<<endl;
}
/* Here we assume the column multiplers are all ones. Hence the code locators matrix is
*exactly the generator matrix
*/
template<std::size_t row_size, std::size_t column_size>
void GeneratorMatrix(element_t (&generator)[row_size][column_size]){
    unsigned int i = 0, j = 0, k = 0;
//    cout<<"pre-parity check matrix"<<endl;
    for(i = 0; i < row_size; i++){
        for(j = 0; j < column_size; j++){
            // j + 1 will range from 1 to 8, those are our code locators
            element_set1(generator[i][j]);
            // this for loop computes the i-power of every code locators
            for(k = 0; k < i; k++)
                element_mul_si(generator[i][j], generator[i][j], j + 1);
//            element_printf("%B  ", generator[i][j]);
        }
//        cout<<endl;
    }
}
/*multiply the code locators matrix and column multiplier matrix.
*column multiplier matrix is a diagnal matrix, so here use 1-dimension vector instead
* for the convenience of programming
*/
template<std::size_t row_size, std::size_t column_size>
void MatrixMultiply(element_t (&matrix)[row_size][column_size], element_t *column_multipliers){
    unsigned int i = 0, j = 0;
    for(i = 0; i < row_size; i++){
        for(j = 0; j < column_size; j++){
            element_mul(matrix[i][j], matrix[i][j], column_multipliers[j]);
        }
    }
}
/*
*size of parity check matrix is (N - K)*N, the codeword size is N*1
*so the sydrome is a (N - K)*1 vector
*/
template<std::size_t row_size, std::size_t column_size, std::size_t row_size_1, std::size_t column_size_1>
void ComputeParityCheckMatrix(element_t (&parity_check_matrix)[row_size][column_size],
                                element_t (&pre_parity_check_matrix)[row_size_1][column_size_1],
                                element_t *multiplier,
                                element_t elimination,
                                element_t *add_vector,
                                element_t *add_temp){
    int i = 0, j = 0;
    GeneratorMatrix(pre_parity_check_matrix);
    //copy pre_parity_check_matirx to formal parity_check_matrix because later when
    //we call ComputeMultipliers() function, the pre_parity_check_matrix will be
    //changed
    for(i = 0; i < N - K; i++){
        for(j = 0; j < N; j++){
            element_set(parity_check_matrix[i][j], pre_parity_check_matrix[i][j]);
        }
    }
    /*
     *Use pre_parity_check_matrix to compute the column multipliers of the parity check matrix
     *with elimination method
     */
    //compute the colomn multipliers of parity check matrix
    // M*N  **   N*1
    ComputeMultipliers(pre_parity_check_matrix, multiplier, elimination, add_vector, add_temp);
    //compute the parity check matrix
    MatrixMultiply(parity_check_matrix, multiplier);
}

template<std::size_t row_size, std::size_t column_size>
void ComputeSyndrome(element_t *syndrome,
        element_t (&parity)[row_size][column_size],
        element_t *codeword,
        element_t temp){
    unsigned int i = 0, j = 0;
    cout<<"sydromes = \n";
    for(i = 0; i < row_size; i++){
        element_set1(syndrome[i]);
        for(j = 0; j < column_size; j++){
            element_pow_zn(temp, codeword[j], parity[i][j]);
            element_mul(syndrome[i], syndrome[i], temp);
        }
        element_printf("%B\n", syndrome[i]);
    }
    cout<<endl;
}

int twiddle(int *x, int *y, int *z, int *p){
    int i, j, k;
    j = 1;
    while(p[j] <= 0)//until we met one which is non-zero
        j++;
    if(p[j-1] == 0){
        for(i = j - 1; i != 1; i--)
            p[i] = -1;
        p[j] = 0;
        *x = *z = 0;
        p[1] = 1;
        *y = j - 1;
    }
    else{
        if(j > 1)
        p[j - 1] = 0;
        do
        j++;
        while(p[j] > 0);
        k = j-1;
        i = j;
        while(p[i] == 0)
            p[i++] = -1;
        if(p[i] == -1){
            p[i] = p[k];
            *z = p[k] - 1;
            *x = i - 1;
            *y = k - 1;
            p[k] = -1;
        }
        else{
            if(i == p[0])//end of the combination, p[0] is n+1 all the time
                    //
                return(1);
            else{
                p[j] = p[i];
                *z = p[i] - 1;
                p[i] = 0;
                *x = j - 1;
                *y = i - 1;
            }
        }
    }
    return(0);
}

void inittwiddle(int m, int n, int *p)
{
    int i;
    p[0] = n+1;//size of p is n+2, first element is?
    for(i = 1; i != n-m+1; i++)
        p[i] = 0;
    while(i != n+1)//i begin with value of n-m+1, till n+1
    {
        p[i] = i+m-n;//p[i] in the range of 1 to m + 1
        i++;
    }
    p[n+1] = -2;//last element is?
    if(m == 0)
        p[1] = 1;
}

//check if the PS  is in the queue, if so, increament the node's count; else insert PS at the tail of the queue
void compare_shares(PotentialShares *header, PotentialShares *PS, PotentialShares *tail){
    PotentialShares *q = header, *pre_q = header;
    int i = 0;
    while(q != NULL){
        for(i = 0; i < N; i++){
            if(element_cmp(q->shares[i], PS->shares[i]))
                break;
        }
        if(i == N){//found the node that contains same share array
            q->count += PS->count;//increase the count by 1
            if(q->count > header->count){//move the node which contains largest count to the head of the queue
                pre_q->next = q->next;
                q->next = header;
                header = q;
            }
            delete PS;//delete the PS memory
            break;//stop looking for node
        }
        else{
            pre_q = q;
            q = q->next;//continuing looking for the node
        }
    }
    if(q == NULL){//no node found that contain same share array, insert the node to the tail of the queues
        tail->next = PS;
        tail = PS;
        tail->next = NULL;
    }
}

void initialize_shares(PotentialShares *PS, pairing_t pairing){
    int i = 0;
    for(i = 0; i < N; i++){
        element_init_GT(PS->shares[i], pairing);
    }
    PS->count = 1;
    PS->next = NULL;
}

void get_pkx_value(element_t *value, int x, int *c, element_t *shares, pairing_t pairing){
    element_t _c[K];
    element_t invert_c[K];
    element_t ele_x, product, sum;
    mpz_t mpz_c[K];
    mpz_t mpz_x;
    int i = 0, j = 0;

    mpz_init(mpz_x);
    element_init_Zr(ele_x, pairing);
    element_init_Zr(product, pairing);
    element_init_Zr(sum, pairing);
    mpz_set_si(mpz_x, x);
    element_set_mpz(ele_x, mpz_x);
    element_set1(product);
    element_set0(sum);
    for(i = 0; i < K; i++){
        element_init_Zr(_c[i], pairing);
        element_init_Zr(invert_c[i], pairing);
        mpz_init(mpz_c[i]);
        mpz_set_si(mpz_c[i], c[i]);
        element_set_mpz(_c[i], mpz_c[i]);
        element_invert(invert_c[K], _c[K]);
    }

    for(i = 0; i < K; i++){
        for(j = 0; j < K; j++){
            if(j != i){
                element_mul(product, product)
            }
        }
    }
}

void  get_potential_shares(PotentialShares *p, element_t *shares, int *c, int *b, pairing_t pairing){
    int i = 0;
    //the connection between c[i] and shares[i] is shares[i] = shares[c[i] - 1], c[i] = i + 1
    for(i = 0; i < K; i++){
        element_set(p->shares[c[i] - 1], shares[c[i] - 1]);
    }
    for(i = 0; i < N - K; i++){//caculate p->shares[b[i] - 1]

        shares[b[i] - 1]
    }
}

void get_correct_shares(element_t *correct_shares, element_t *shares, pairing_t pairing){
    int i, x, y, z, p[N+2], b[N - M], count = 0;
  int a[N] = {0};
  int c[N] = {0};
  PotentialShares *header = NULL, *p_new = NULL, *tail = NULL;
  header = p_new;
  inittwiddle(K, N, p);
  //a[i] is full xi_array which contains N xi-s
  for(i = 0; i < N; i++)
        a[i] = i + 1;
  //c[i] is pairtial xi_array which contains K xi-s
  for(i = N - K; i != N; i++){
        c[i - N + K] = a[i];
  }
  //set the left over shares
  for(i = 0; i < N - M; i++){
        b[i] = a[i];
  }

  while(!twiddle(&x, &y, &z, p)){
        for(i = 0; i < N - M; i++){
            if(b[i] == a[x]){
                b[i] = c[z];
                break;
            }
        }
        c[z] = a[x];//c[z]+1 are the xi-s
        p_new = new PotentialShares;
        initialize_shares(p_new, pairing);//???doubt whether this is ok for memory allocation
        get_potential_shares(p_new, shares, c, b, pairing);
        compare_shares(header, p_new, tail);
  }
  //after the while loop, header should point to the node which contains correct shares
  for(i = 0; i < N; i++)
      element_set(correct_shares[i], header->shares[i]);
}

#endif
