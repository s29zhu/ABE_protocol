//
// Generated file, do not edit! Created by opp_msgc 4.2 from UCACPacket.msg.
//

// Disable warnings about unused variables, empty switch stmts, etc:
#ifdef _MSC_VER
#  pragma warning(disable:4101)
#  pragma warning(disable:4065)
#endif

#include <iostream>
#include <sstream>
#include "UCACPacket_m.h"

// Template rule which fires if a struct or class doesn't have operator<<
template<typename T>
std::ostream& operator<<(std::ostream& out,const T&) {return out;}

// Another default rule (prevents compiler from choosing base class' doPacking())
template<typename T>
void doPacking(cCommBuffer *, T& t) {
    throw cRuntimeError("Parsim error: no doPacking() function for type %s or its base class (check .msg and _m.cc/h files!)",opp_typename(typeid(t)));
}

template<typename T>
void doUnpacking(cCommBuffer *, T& t) {
    throw cRuntimeError("Parsim error: no doUnpacking() function for type %s or its base class (check .msg and _m.cc/h files!)",opp_typename(typeid(t)));
}




EXECUTE_ON_STARTUP(
    cEnum *e = cEnum::find("UCACPacketType");
    if (!e) enums.getInstance()->add(e = new cEnum("UCACPacketType"));
    e->insert(CONN_REQ, "CONN_REQ");
    e->insert(CONN_ACK, "CONN_ACK");
    e->insert(DISC_REQ, "DISC_REQ");
    e->insert(DISC_ACK, "DISC_ACK");
    e->insert(DATA, "DATA");
    e->insert(REDIRECT, "REDIRECT");
    e->insert(OWNER_SK, "OWNER_SK");
    e->insert(CHALLENG, "CHALLENG");
    e->insert(RESPONSE, "RESPONSE");
    e->insert(PRNT_REQ, "PRNT_REQ");
    e->insert(PRNT_RES, "PRNT_RES");
    e->insert(FILE_REQ, "FILE_REQ");
    e->insert(FILE_RES, "FILE_RES");
    e->insert(AUTZ_REQ, "AUTZ_REQ");
    e->insert(AUTZ_RES, "AUTZ_RES");
    e->insert(AUTN_REQ, "AUTN_REQ");
    e->insert(AUTN_RES, "AUTN_RES");
    e->insert(ATTR_REQ, "ATTR_REQ");
    e->insert(ATTR_RES, "ATTR_RES");
    e->insert(DES1_REQ, "DES1_REQ");
    e->insert(DES1_RES, "DES1_RES");
    e->insert(DES2_REQ, "DES2_REQ");
    e->insert(DES2_RES, "DES2_RES");
);

Register_Class(UCACPacket);

UCACPacket::UCACPacket(const char *name, int kind) : cPacket(name,kind)
{
    this->srcAddress_var = 0;
    this->destAddress_var = 0;
    this->srcProcId_var = 0;
    this->destProcId_var = 0;
}

UCACPacket::UCACPacket(const UCACPacket& other) : cPacket(other)
{
    copy(other);
}

UCACPacket::~UCACPacket()
{
}

UCACPacket& UCACPacket::operator=(const UCACPacket& other)
{
    if (this==&other) return *this;
    cPacket::operator=(other);
    copy(other);
    return *this;
}

void UCACPacket::copy(const UCACPacket& other)
{
    this->srcAddress_var = other.srcAddress_var;
    this->destAddress_var = other.destAddress_var;
    this->srcProcId_var = other.srcProcId_var;
    this->destProcId_var = other.destProcId_var;
}

void UCACPacket::parsimPack(cCommBuffer *b)
{
    cPacket::parsimPack(b);
    doPacking(b,this->srcAddress_var);
    doPacking(b,this->destAddress_var);
    doPacking(b,this->srcProcId_var);
    doPacking(b,this->destProcId_var);
}

void UCACPacket::parsimUnpack(cCommBuffer *b)
{
    cPacket::parsimUnpack(b);
    doUnpacking(b,this->srcAddress_var);
    doUnpacking(b,this->destAddress_var);
    doUnpacking(b,this->srcProcId_var);
    doUnpacking(b,this->destProcId_var);
}

int UCACPacket::getSrcAddress() const
{
    return srcAddress_var;
}

void UCACPacket::setSrcAddress(int srcAddress)
{
    this->srcAddress_var = srcAddress;
}

int UCACPacket::getDestAddress() const
{
    return destAddress_var;
}

void UCACPacket::setDestAddress(int destAddress)
{
    this->destAddress_var = destAddress;
}

int UCACPacket::getSrcProcId() const
{
    return srcProcId_var;
}

void UCACPacket::setSrcProcId(int srcProcId)
{
    this->srcProcId_var = srcProcId;
}

int UCACPacket::getDestProcId() const
{
    return destProcId_var;
}

void UCACPacket::setDestProcId(int destProcId)
{
    this->destProcId_var = destProcId;
}

class UCACPacketDescriptor : public cClassDescriptor
{
  public:
    UCACPacketDescriptor();
    virtual ~UCACPacketDescriptor();

    virtual bool doesSupport(cObject *obj) const;
    virtual const char *getProperty(const char *propertyname) const;
    virtual int getFieldCount(void *object) const;
    virtual const char *getFieldName(void *object, int field) const;
    virtual int findField(void *object, const char *fieldName) const;
    virtual unsigned int getFieldTypeFlags(void *object, int field) const;
    virtual const char *getFieldTypeString(void *object, int field) const;
    virtual const char *getFieldProperty(void *object, int field, const char *propertyname) const;
    virtual int getArraySize(void *object, int field) const;

    virtual std::string getFieldAsString(void *object, int field, int i) const;
    virtual bool setFieldAsString(void *object, int field, int i, const char *value) const;

    virtual const char *getFieldStructName(void *object, int field) const;
    virtual void *getFieldStructPointer(void *object, int field, int i) const;
};

Register_ClassDescriptor(UCACPacketDescriptor);

UCACPacketDescriptor::UCACPacketDescriptor() : cClassDescriptor("UCACPacket", "cPacket")
{
}

UCACPacketDescriptor::~UCACPacketDescriptor()
{
}

bool UCACPacketDescriptor::doesSupport(cObject *obj) const
{
    return dynamic_cast<UCACPacket *>(obj)!=NULL;
}

const char *UCACPacketDescriptor::getProperty(const char *propertyname) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    return basedesc ? basedesc->getProperty(propertyname) : NULL;
}

int UCACPacketDescriptor::getFieldCount(void *object) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    return basedesc ? 4+basedesc->getFieldCount(object) : 4;
}

unsigned int UCACPacketDescriptor::getFieldTypeFlags(void *object, int field) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldTypeFlags(object, field);
        field -= basedesc->getFieldCount(object);
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,
        FD_ISEDITABLE,
        FD_ISEDITABLE,
        FD_ISEDITABLE,
    };
    return (field>=0 && field<4) ? fieldTypeFlags[field] : 0;
}

const char *UCACPacketDescriptor::getFieldName(void *object, int field) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldName(object, field);
        field -= basedesc->getFieldCount(object);
    }
    static const char *fieldNames[] = {
        "srcAddress",
        "destAddress",
        "srcProcId",
        "destProcId",
    };
    return (field>=0 && field<4) ? fieldNames[field] : NULL;
}

int UCACPacketDescriptor::findField(void *object, const char *fieldName) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    int base = basedesc ? basedesc->getFieldCount(object) : 0;
    if (fieldName[0]=='s' && strcmp(fieldName, "srcAddress")==0) return base+0;
    if (fieldName[0]=='d' && strcmp(fieldName, "destAddress")==0) return base+1;
    if (fieldName[0]=='s' && strcmp(fieldName, "srcProcId")==0) return base+2;
    if (fieldName[0]=='d' && strcmp(fieldName, "destProcId")==0) return base+3;
    return basedesc ? basedesc->findField(object, fieldName) : -1;
}

const char *UCACPacketDescriptor::getFieldTypeString(void *object, int field) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldTypeString(object, field);
        field -= basedesc->getFieldCount(object);
    }
    static const char *fieldTypeStrings[] = {
        "int",
        "int",
        "int",
        "int",
    };
    return (field>=0 && field<4) ? fieldTypeStrings[field] : NULL;
}

const char *UCACPacketDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldProperty(object, field, propertyname);
        field -= basedesc->getFieldCount(object);
    }
    switch (field) {
        default: return NULL;
    }
}

int UCACPacketDescriptor::getArraySize(void *object, int field) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getArraySize(object, field);
        field -= basedesc->getFieldCount(object);
    }
    UCACPacket *pp = (UCACPacket *)object; (void)pp;
    switch (field) {
        default: return 0;
    }
}

std::string UCACPacketDescriptor::getFieldAsString(void *object, int field, int i) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldAsString(object,field,i);
        field -= basedesc->getFieldCount(object);
    }
    UCACPacket *pp = (UCACPacket *)object; (void)pp;
    switch (field) {
        case 0: return long2string(pp->getSrcAddress());
        case 1: return long2string(pp->getDestAddress());
        case 2: return long2string(pp->getSrcProcId());
        case 3: return long2string(pp->getDestProcId());
        default: return "";
    }
}

bool UCACPacketDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->setFieldAsString(object,field,i,value);
        field -= basedesc->getFieldCount(object);
    }
    UCACPacket *pp = (UCACPacket *)object; (void)pp;
    switch (field) {
        case 0: pp->setSrcAddress(string2long(value)); return true;
        case 1: pp->setDestAddress(string2long(value)); return true;
        case 2: pp->setSrcProcId(string2long(value)); return true;
        case 3: pp->setDestProcId(string2long(value)); return true;
        default: return false;
    }
}

const char *UCACPacketDescriptor::getFieldStructName(void *object, int field) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldStructName(object, field);
        field -= basedesc->getFieldCount(object);
    }
    static const char *fieldStructNames[] = {
        NULL,
        NULL,
        NULL,
        NULL,
    };
    return (field>=0 && field<4) ? fieldStructNames[field] : NULL;
}

void *UCACPacketDescriptor::getFieldStructPointer(void *object, int field, int i) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldStructPointer(object, field, i);
        field -= basedesc->getFieldCount(object);
    }
    UCACPacket *pp = (UCACPacket *)object; (void)pp;
    switch (field) {
        default: return NULL;
    }
}

Register_Class(UCACDataPacket);

UCACDataPacket::UCACDataPacket(const char *name, int kind) : UCACPacket(name,kind)
{
    this->payload_var = 0;
}

UCACDataPacket::UCACDataPacket(const UCACDataPacket& other) : UCACPacket(other)
{
    copy(other);
}

UCACDataPacket::~UCACDataPacket()
{
}

UCACDataPacket& UCACDataPacket::operator=(const UCACDataPacket& other)
{
    if (this==&other) return *this;
    UCACPacket::operator=(other);
    copy(other);
    return *this;
}

void UCACDataPacket::copy(const UCACDataPacket& other)
{
    this->payload_var = other.payload_var;
}

void UCACDataPacket::parsimPack(cCommBuffer *b)
{
    UCACPacket::parsimPack(b);
    doPacking(b,this->payload_var);
}

void UCACDataPacket::parsimUnpack(cCommBuffer *b)
{
    UCACPacket::parsimUnpack(b);
    doUnpacking(b,this->payload_var);
}

const char * UCACDataPacket::getPayload() const
{
    return payload_var.c_str();
}

void UCACDataPacket::setPayload(const char * payload)
{
    this->payload_var = payload;
}

class UCACDataPacketDescriptor : public cClassDescriptor
{
  public:
    UCACDataPacketDescriptor();
    virtual ~UCACDataPacketDescriptor();

    virtual bool doesSupport(cObject *obj) const;
    virtual const char *getProperty(const char *propertyname) const;
    virtual int getFieldCount(void *object) const;
    virtual const char *getFieldName(void *object, int field) const;
    virtual int findField(void *object, const char *fieldName) const;
    virtual unsigned int getFieldTypeFlags(void *object, int field) const;
    virtual const char *getFieldTypeString(void *object, int field) const;
    virtual const char *getFieldProperty(void *object, int field, const char *propertyname) const;
    virtual int getArraySize(void *object, int field) const;

    virtual std::string getFieldAsString(void *object, int field, int i) const;
    virtual bool setFieldAsString(void *object, int field, int i, const char *value) const;

    virtual const char *getFieldStructName(void *object, int field) const;
    virtual void *getFieldStructPointer(void *object, int field, int i) const;
};

Register_ClassDescriptor(UCACDataPacketDescriptor);

UCACDataPacketDescriptor::UCACDataPacketDescriptor() : cClassDescriptor("UCACDataPacket", "UCACPacket")
{
}

UCACDataPacketDescriptor::~UCACDataPacketDescriptor()
{
}

bool UCACDataPacketDescriptor::doesSupport(cObject *obj) const
{
    return dynamic_cast<UCACDataPacket *>(obj)!=NULL;
}

const char *UCACDataPacketDescriptor::getProperty(const char *propertyname) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    return basedesc ? basedesc->getProperty(propertyname) : NULL;
}

int UCACDataPacketDescriptor::getFieldCount(void *object) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    return basedesc ? 1+basedesc->getFieldCount(object) : 1;
}

unsigned int UCACDataPacketDescriptor::getFieldTypeFlags(void *object, int field) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldTypeFlags(object, field);
        field -= basedesc->getFieldCount(object);
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,
    };
    return (field>=0 && field<1) ? fieldTypeFlags[field] : 0;
}

const char *UCACDataPacketDescriptor::getFieldName(void *object, int field) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldName(object, field);
        field -= basedesc->getFieldCount(object);
    }
    static const char *fieldNames[] = {
        "payload",
    };
    return (field>=0 && field<1) ? fieldNames[field] : NULL;
}

int UCACDataPacketDescriptor::findField(void *object, const char *fieldName) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    int base = basedesc ? basedesc->getFieldCount(object) : 0;
    if (fieldName[0]=='p' && strcmp(fieldName, "payload")==0) return base+0;
    return basedesc ? basedesc->findField(object, fieldName) : -1;
}

const char *UCACDataPacketDescriptor::getFieldTypeString(void *object, int field) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldTypeString(object, field);
        field -= basedesc->getFieldCount(object);
    }
    static const char *fieldTypeStrings[] = {
        "string",
    };
    return (field>=0 && field<1) ? fieldTypeStrings[field] : NULL;
}

const char *UCACDataPacketDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldProperty(object, field, propertyname);
        field -= basedesc->getFieldCount(object);
    }
    switch (field) {
        default: return NULL;
    }
}

int UCACDataPacketDescriptor::getArraySize(void *object, int field) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getArraySize(object, field);
        field -= basedesc->getFieldCount(object);
    }
    UCACDataPacket *pp = (UCACDataPacket *)object; (void)pp;
    switch (field) {
        default: return 0;
    }
}

std::string UCACDataPacketDescriptor::getFieldAsString(void *object, int field, int i) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldAsString(object,field,i);
        field -= basedesc->getFieldCount(object);
    }
    UCACDataPacket *pp = (UCACDataPacket *)object; (void)pp;
    switch (field) {
        case 0: return oppstring2string(pp->getPayload());
        default: return "";
    }
}

bool UCACDataPacketDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->setFieldAsString(object,field,i,value);
        field -= basedesc->getFieldCount(object);
    }
    UCACDataPacket *pp = (UCACDataPacket *)object; (void)pp;
    switch (field) {
        case 0: pp->setPayload((value)); return true;
        default: return false;
    }
}

const char *UCACDataPacketDescriptor::getFieldStructName(void *object, int field) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldStructName(object, field);
        field -= basedesc->getFieldCount(object);
    }
    static const char *fieldStructNames[] = {
        NULL,
    };
    return (field>=0 && field<1) ? fieldStructNames[field] : NULL;
}

void *UCACDataPacketDescriptor::getFieldStructPointer(void *object, int field, int i) const
{
    cClassDescriptor *basedesc = getBaseClassDescriptor();
    if (basedesc) {
        if (field < basedesc->getFieldCount(object))
            return basedesc->getFieldStructPointer(object, field, i);
        field -= basedesc->getFieldCount(object);
    }
    UCACDataPacket *pp = (UCACDataPacket *)object; (void)pp;
    switch (field) {
        default: return NULL;
    }
}


